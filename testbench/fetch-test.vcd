$date
	Sun Nov 21 15:00:45 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_test $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module a $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 # write $end
$var wire 32 $ rr_ex_rs2_val [31:0] $end
$var wire 32 % rr_ex_rs1_val [31:0] $end
$var wire 5 & rr_ex_rd_number [4:0] $end
$var wire 32 ' rr_ex_pc [31:0] $end
$var wire 7 ( rr_ex_opcode [6:0] $end
$var wire 32 ) rr_ex_immediate [31:0] $end
$var wire 7 * rr_ex_func7 [6:0] $end
$var wire 3 + rr_ex_func3 [2:0] $end
$var wire 32 , reg_file_rr_b_val [31:0] $end
$var wire 32 - reg_file_rr_a_val [31:0] $end
$var wire 32 . if_id_pc [31:0] $end
$var wire 32 / if_id_instruction [31:0] $end
$var wire 5 0 id_rr_sr2_number [4:0] $end
$var wire 5 1 id_rr_sr1_number [4:0] $end
$var wire 5 2 id_rr_rd_number [4:0] $end
$var wire 32 3 id_rr_pc [31:0] $end
$var wire 7 4 id_rr_opcode [6:0] $end
$var wire 32 5 id_rr_immediate [31:0] $end
$var wire 7 6 id_rr_func7 [6:0] $end
$var wire 3 7 id_rr_func3 [2:0] $end
$var wire 5 8 dest_addr [4:0] $end
$var wire 32 9 data [31:0] $end
$scope module ex $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 : sign_extended [31:0] $end
$var wire 32 ; rs2_val [31:0] $end
$var wire 32 < rs1_val [31:0] $end
$var wire 5 = rd_number [4:0] $end
$var wire 32 > pc [31:0] $end
$var wire 7 ? opcode [6:0] $end
$var wire 32 @ immediate [31:0] $end
$var wire 7 A func7 [6:0] $end
$var wire 3 B func3 [2:0] $end
$var reg 5 C rd_number_out [4:0] $end
$var reg 32 D result_out [31:0] $end
$upscope $end
$scope module fetch $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var reg 32 E instruction_out [31:0] $end
$var reg 32 F pc [31:0] $end
$var reg 32 G pc_out [31:0] $end
$upscope $end
$scope module id $end
$var wire 1 ! clk $end
$var wire 32 H instruction [31:0] $end
$var wire 32 I pc [31:0] $end
$var wire 1 " reset $end
$var wire 5 J rs2_number [4:0] $end
$var wire 5 K rs1_number [4:0] $end
$var wire 5 L rd_number [4:0] $end
$var wire 7 M opcode [6:0] $end
$var wire 3 N func3 [2:0] $end
$var reg 3 O func3_out [2:0] $end
$var reg 7 P func7_out [6:0] $end
$var reg 32 Q immediate_out [31:0] $end
$var reg 7 R opcode_out [6:0] $end
$var reg 32 S pc_out [31:0] $end
$var reg 5 T rd_number_out [4:0] $end
$var reg 5 U rs1_number_out [4:0] $end
$var reg 5 V rs2_number_out [4:0] $end
$upscope $end
$scope module reg_file $end
$var wire 5 W a_addr [4:0] $end
$var wire 5 X b_addr [4:0] $end
$var wire 1 ! clk $end
$var wire 32 Y data [31:0] $end
$var wire 5 Z dest_addr [4:0] $end
$var wire 1 # write $end
$var reg 32 [ a_output [31:0] $end
$var reg 32 \ b_output [31:0] $end
$upscope $end
$scope module rr $end
$var wire 32 ] a_val [31:0] $end
$var wire 32 ^ b_val [31:0] $end
$var wire 1 ! clk $end
$var wire 3 _ func3 [2:0] $end
$var wire 7 ` func7 [6:0] $end
$var wire 32 a immediate [31:0] $end
$var wire 7 b opcode [6:0] $end
$var wire 32 c pc [31:0] $end
$var wire 5 d rd_number [4:0] $end
$var wire 1 " reset $end
$var wire 5 e rs1_number [4:0] $end
$var wire 5 f rs2_number [4:0] $end
$var reg 3 g func3_out [2:0] $end
$var reg 7 h func7_out [6:0] $end
$var reg 32 i immediate_out [31:0] $end
$var reg 7 j opcode_out [6:0] $end
$var reg 32 k pc_out [31:0] $end
$var reg 5 l rd_number_out [4:0] $end
$var reg 32 m rs1_val_out [31:0] $end
$var reg 32 n rs2_val_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
1#
1"
0!
$end
#1
b0 M
b0 K
b0 J
b0 L
b0 N
b0 ,
b0 \
b0 ^
b0 -
b0 [
b0 ]
b0 :
b0 .
b0 G
b0 I
b0 /
b0 E
b0 H
b0 F
b0 4
b0 R
b0 b
b0 7
b0 O
b0 _
b0 6
b0 P
b0 `
b0 5
b0 Q
b0 a
b0 2
b0 T
b0 d
b0 0
b0 V
b0 X
b0 f
b0 1
b0 U
b0 W
b0 e
b0 3
b0 S
b0 c
b0 (
b0 ?
b0 j
b0 +
b0 B
b0 g
b0 *
b0 A
b0 h
b0 )
b0 @
b0 i
b0 &
b0 =
b0 l
b0 $
b0 ;
b0 n
b0 %
b0 <
b0 m
b0 '
b0 >
b0 k
b0 9
b0 D
b0 Y
b0 8
b0 C
b0 Z
1!
#2
0!
#3
1!
#4
0!
0"
#5
b10011 M
b1000 J
b1 L
b100 F
b111110100000000000000010010011 /
b111110100000000000000010010011 E
b111110100000000000000010010011 H
1!
#6
0!
#7
b110011 M
b1 K
b1 J
b10 L
b1111101000 5
b1111101000 Q
b1111101000 a
b1 2
b1 T
b1 d
b10011 4
b10011 R
b10011 b
b1000 F
b100 .
b100 G
b100 I
b100001000000100110011 /
b100001000000100110011 E
b100001000000100110011 H
1!
#8
0!
#9
bx M
bx K
bx J
bx L
bx N
bx ,
bx \
bx ^
bx -
bx [
bx ]
b1111101000 :
b1100 F
b1000 .
b1000 G
b1000 I
bx /
bx E
bx H
b1 0
b1 V
b1 X
b1 f
b10 2
b10 T
b10 d
b1 1
b1 U
b1 W
b1 e
b110011 4
b110011 R
b110011 b
b100 3
b100 S
b100 c
b10011 (
b10011 ?
b10011 j
b1111101000 )
b1111101000 @
b1111101000 i
b1 &
b1 =
b1 l
1!
#10
0!
#11
b1111101000 9
b1111101000 D
b1111101000 Y
b1 8
b1 C
b1 Z
b110011 (
b110011 ?
b110011 j
b10 &
b10 =
b10 l
bx $
bx ;
bx n
bx %
bx <
bx m
b100 '
b100 >
b100 k
bx 4
bx R
bx b
b1000 3
b1000 S
b1000 c
b10000 F
b1100 .
b1100 G
b1100 I
1!
#12
0!
#13
b1111101000 ,
b1111101000 \
b1111101000 ^
b1111101000 -
b1111101000 [
b1111101000 ]
b10100 F
b10000 .
b10000 G
b10000 I
b1100 3
b1100 S
b1100 c
bx (
bx ?
bx j
b1000 '
b1000 >
b1000 k
bx 9
bx D
bx Y
b10 8
b10 C
b10 Z
1!
#14
0!
#15
b1111101000 $
b1111101000 ;
b1111101000 n
b1111101000 %
b1111101000 <
b1111101000 m
b1100 '
b1100 >
b1100 k
b10000 3
b10000 S
b10000 c
b11000 F
b10100 .
b10100 G
b10100 I
1!
#16
0!
#17
b11100 F
b11000 .
b11000 G
b11000 I
b10100 3
b10100 S
b10100 c
b10000 '
b10000 >
b10000 k
1!
#18
0!
#19
b10100 '
b10100 >
b10100 k
b11000 3
b11000 S
b11000 c
b100000 F
b11100 .
b11100 G
b11100 I
1!
#20
0!
#21
b100100 F
b100000 .
b100000 G
b100000 I
b11100 3
b11100 S
b11100 c
b11000 '
b11000 >
b11000 k
1!
#22
0!
#23
b11100 '
b11100 >
b11100 k
b100000 3
b100000 S
b100000 c
b101000 F
b100100 .
b100100 G
b100100 I
1!
#24
0!
#25
b101100 F
b101000 .
b101000 G
b101000 I
b100100 3
b100100 S
b100100 c
b100000 '
b100000 >
b100000 k
1!
#26
0!
#27
b100100 '
b100100 >
b100100 k
b101000 3
b101000 S
b101000 c
b110000 F
b101100 .
b101100 G
b101100 I
1!
#28
0!
#29
b110100 F
b110000 .
b110000 G
b110000 I
b101100 3
b101100 S
b101100 c
b101000 '
b101000 >
b101000 k
1!
#30
0!
#31
b101100 '
b101100 >
b101100 k
b110000 3
b110000 S
b110000 c
b111000 F
b110100 .
b110100 G
b110100 I
1!
#32
0!
#33
b111100 F
b111000 .
b111000 G
b111000 I
b110100 3
b110100 S
b110100 c
b110000 '
b110000 >
b110000 k
1!
#34
0!
#35
b110100 '
b110100 >
b110100 k
b111000 3
b111000 S
b111000 c
b1000000 F
b111100 .
b111100 G
b111100 I
1!
#36
0!
#37
b1000100 F
b1000000 .
b1000000 G
b1000000 I
b111100 3
b111100 S
b111100 c
b111000 '
b111000 >
b111000 k
1!
#38
0!
#39
b111100 '
b111100 >
b111100 k
b1000000 3
b1000000 S
b1000000 c
b1001000 F
b1000100 .
b1000100 G
b1000100 I
1!
#40
0!
#41
b1001100 F
b1001000 .
b1001000 G
b1001000 I
b1000100 3
b1000100 S
b1000100 c
b1000000 '
b1000000 >
b1000000 k
1!
#42
0!
#43
b1000100 '
b1000100 >
b1000100 k
b1001000 3
b1001000 S
b1001000 c
b1010000 F
b1001100 .
b1001100 G
b1001100 I
1!
#44
0!
#45
b1010100 F
b1010000 .
b1010000 G
b1010000 I
b1001100 3
b1001100 S
b1001100 c
b1001000 '
b1001000 >
b1001000 k
1!
#46
0!
#47
b1001100 '
b1001100 >
b1001100 k
b1010000 3
b1010000 S
b1010000 c
b1011000 F
b1010100 .
b1010100 G
b1010100 I
1!
#48
0!
#49
b1011100 F
b1011000 .
b1011000 G
b1011000 I
b1010100 3
b1010100 S
b1010100 c
b1010000 '
b1010000 >
b1010000 k
1!
#50
0!
#51
b1010100 '
b1010100 >
b1010100 k
b1011000 3
b1011000 S
b1011000 c
b1100000 F
b1011100 .
b1011100 G
b1011100 I
1!
#52
0!
#53
b1100100 F
b1100000 .
b1100000 G
b1100000 I
b1011100 3
b1011100 S
b1011100 c
b1011000 '
b1011000 >
b1011000 k
1!
#54
0!
