$date
	Wed Nov 24 01:09:03 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_test $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module a $end
$var wire 1 ! clk $end
$var wire 5 # mem_rd [4:0] $end
$var wire 1 " reset $end
$var wire 1 $ wb_we $end
$var wire 1 % wb_stb $end
$var wire 4 & wb_sel [3:0] $end
$var wire 32 ' wb_data [31:0] $end
$var wire 1 ( wb_cyc $end
$var wire 30 ) wb_addr [29:0] $end
$var wire 1 * rr_pipeline_stall $end
$var wire 32 + rr_ex_rs2_val [31:0] $end
$var wire 32 , rr_ex_rs1_val [31:0] $end
$var wire 5 - rr_ex_rd_number [4:0] $end
$var wire 32 . rr_ex_pc [31:0] $end
$var wire 7 / rr_ex_opcode [6:0] $end
$var wire 32 0 rr_ex_immediate [31:0] $end
$var wire 7 1 rr_ex_func7 [6:0] $end
$var wire 3 2 rr_ex_func3 [2:0] $end
$var wire 32 3 reg_file_rr_b_val [31:0] $end
$var wire 32 4 reg_file_rr_a_val [31:0] $end
$var wire 1 5 mem_stall $end
$var wire 1 6 mem_pipeline_stall $end
$var wire 32 7 mem_data [31:0] $end
$var wire 1 8 mem_ack $end
$var wire 32 9 if_id_pc [31:0] $end
$var wire 32 : if_id_instruction [31:0] $end
$var wire 5 ; id_rr_sr2_number [4:0] $end
$var wire 5 < id_rr_sr1_number [4:0] $end
$var wire 5 = id_rr_rd_number [4:0] $end
$var wire 32 > id_rr_pc [31:0] $end
$var wire 7 ? id_rr_opcode [6:0] $end
$var wire 32 @ id_rr_immediate [31:0] $end
$var wire 7 A id_rr_func7 [6:0] $end
$var wire 3 B id_rr_func3 [2:0] $end
$var wire 1 C id_pipeline_stall $end
$var wire 1 D ex_pipeline_stall $end
$var wire 32 E ex_mem_rs2_val [31:0] $end
$var wire 32 F ex_mem_rs1_val [31:0] $end
$var wire 32 G ex_mem_result [31:0] $end
$var wire 5 H ex_mem_rd_number [4:0] $end
$var wire 32 I ex_mem_pc [31:0] $end
$var wire 7 J ex_mem_opcode [6:0] $end
$var wire 32 K ex_mem_immediate [31:0] $end
$var wire 3 L ex_mem_func3 [2:0] $end
$var wire 5 M dest_addr [4:0] $end
$var wire 32 N data [31:0] $end
$scope module ex $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 O sign_extended [31:0] $end
$var wire 1 P is_alui $end
$var wire 1 Q is_alu $end
$var wire 32 R i_rs2_val [31:0] $end
$var wire 32 S i_rs1_val [31:0] $end
$var wire 5 T i_rd_number [4:0] $end
$var wire 1 6 i_pipeline_stall $end
$var wire 32 U i_pc [31:0] $end
$var wire 7 V i_opcode [6:0] $end
$var wire 32 W i_immediate [31:0] $end
$var wire 7 X i_func7 [6:0] $end
$var wire 3 Y i_func3 [2:0] $end
$var reg 3 Z o_func3 [2:0] $end
$var reg 32 [ o_immediate [31:0] $end
$var reg 7 \ o_opcode [6:0] $end
$var reg 32 ] o_pc [31:0] $end
$var reg 1 D o_pipeline_stall $end
$var reg 5 ^ o_rd_number [4:0] $end
$var reg 32 _ o_result [31:0] $end
$var reg 32 ` o_rs1_val [31:0] $end
$var reg 32 a o_rs2_val [31:0] $end
$var reg 1 b pipeline_stall $end
$upscope $end
$scope module fetch $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 C i_pipeline_stall $end
$var reg 32 c o_instruction [31:0] $end
$var reg 32 d o_pc [31:0] $end
$var reg 32 e pc [31:0] $end
$upscope $end
$scope module id $end
$var wire 1 ! clk $end
$var wire 32 f i_instruction [31:0] $end
$var wire 32 g i_pc [31:0] $end
$var wire 1 " reset $end
$var wire 5 h rs2_number [4:0] $end
$var wire 5 i rs1_number [4:0] $end
$var wire 5 j rd_number [4:0] $end
$var wire 7 k opcode [6:0] $end
$var wire 1 l is_store $end
$var wire 1 m is_lui $end
$var wire 1 n is_load $end
$var wire 1 o is_jalr $end
$var wire 1 p is_jal $end
$var wire 1 q is_branch $end
$var wire 1 r is_auipc $end
$var wire 1 s is_alui $end
$var wire 1 t is_alu $end
$var wire 1 * i_pipeline_stall $end
$var wire 7 u func7 [6:0] $end
$var wire 3 v func3 [2:0] $end
$var reg 3 w o_func3 [2:0] $end
$var reg 7 x o_func7 [6:0] $end
$var reg 32 y o_immediate [31:0] $end
$var reg 7 z o_opcode [6:0] $end
$var reg 32 { o_pc [31:0] $end
$var reg 1 C o_pipeline_stall $end
$var reg 5 | o_rd_number [4:0] $end
$var reg 5 } o_rs1_number [4:0] $end
$var reg 5 ~ o_rs2_number [4:0] $end
$upscope $end
$scope module mem $end
$var wire 32 !" a [31:0] $end
$var wire 1 ! clk $end
$var wire 3 "" i_func3 [2:0] $end
$var wire 32 #" i_immediate [31:0] $end
$var wire 7 $" i_opcode [6:0] $end
$var wire 32 %" i_pc [31:0] $end
$var wire 5 &" i_rd_number [4:0] $end
$var wire 32 '" i_result [31:0] $end
$var wire 32 (" i_rs1_val [31:0] $end
$var wire 32 )" i_rs2_val [31:0] $end
$var wire 1 " reset $end
$var wire 32 *" sign_extended_imm [31:0] $end
$var wire 32 +" rs1_and_offset [31:0] $end
$var wire 1 ," is_word $end
$var wire 1 -" is_store $end
$var wire 1 ." is_load $end
$var wire 1 /" is_half_unsigned $end
$var wire 1 0" is_half $end
$var wire 1 1" is_byte_unsigned $end
$var wire 1 2" is_byte $end
$var wire 1 5 i_wb_stall $end
$var wire 32 3" i_wb_data [31:0] $end
$var wire 1 8 i_wb_ack $end
$var reg 32 4" load_result [31:0] $end
$var reg 1 6 o_pipeline_stall $end
$var reg 5 5" o_rd_number [4:0] $end
$var reg 32 6" o_result [31:0] $end
$var reg 30 7" o_wb_addr [29:0] $end
$var reg 1 ( o_wb_cycle $end
$var reg 32 8" o_wb_data [31:0] $end
$var reg 4 9" o_wb_sel [3:0] $end
$var reg 1 % o_wb_stb $end
$var reg 1 $ o_wb_we $end
$var reg 4 :" state [3:0] $end
$upscope $end
$scope module my_mem $end
$var wire 1 ! i_clk $end
$var wire 18 ;" i_wb_addr [17:0] $end
$var wire 1 ( i_wb_cyc $end
$var wire 32 <" i_wb_data [31:0] $end
$var wire 4 =" i_wb_sel [3:0] $end
$var wire 1 % i_wb_stb $end
$var wire 1 $ i_wb_we $end
$var wire 32 >" mem0 [31:0] $end
$var wire 1 5 o_wb_stall $end
$var wire 1 ?" unused $end
$var wire 18 @" w_addr [17:0] $end
$var wire 32 A" w_data [31:0] $end
$var wire 4 B" w_sel [3:0] $end
$var wire 1 C" w_stb $end
$var wire 1 D" w_wstb $end
$var wire 1 8 o_wb_ack $end
$var reg 32 E" o_wb_data [31:0] $end
$var integer 32 F" current_state [31:0] $end
$upscope $end
$scope module reg_file $end
$var wire 1 ! clk $end
$var wire 5 G" i_a_addr [4:0] $end
$var wire 5 H" i_b_addr [4:0] $end
$var wire 32 I" i_data [31:0] $end
$var wire 5 J" i_dest_addr [4:0] $end
$var wire 32 K" x0 [31:0] $end
$var wire 32 L" x1 [31:0] $end
$var wire 32 M" x2 [31:0] $end
$var wire 32 N" x3 [31:0] $end
$var wire 32 O" x4 [31:0] $end
$var reg 32 P" o_a [31:0] $end
$var reg 32 Q" o_b [31:0] $end
$upscope $end
$scope module rr $end
$var wire 1 ! clk $end
$var wire 32 R" i_a_val [31:0] $end
$var wire 32 S" i_b_val [31:0] $end
$var wire 5 T" i_ex_rd_number [4:0] $end
$var wire 3 U" i_func3 [2:0] $end
$var wire 7 V" i_func7 [6:0] $end
$var wire 32 W" i_immediate [31:0] $end
$var wire 5 X" i_mem_rd_number [4:0] $end
$var wire 7 Y" i_opcode [6:0] $end
$var wire 32 Z" i_pc [31:0] $end
$var wire 1 D i_pipeline_stall $end
$var wire 5 [" i_rd_number [4:0] $end
$var wire 5 \" i_rs1_number [4:0] $end
$var wire 5 ]" i_rs2_number [4:0] $end
$var wire 1 " reset $end
$var reg 3 ^" o_func3 [2:0] $end
$var reg 7 _" o_func7 [6:0] $end
$var reg 32 `" o_immediate [31:0] $end
$var reg 7 a" o_opcode [6:0] $end
$var reg 32 b" o_pc [31:0] $end
$var reg 1 * o_pipeline_stall $end
$var reg 5 c" o_rd_number [4:0] $end
$var reg 32 d" o_rs1_val [31:0] $end
$var reg 32 e" o_rs2_val [31:0] $end
$var reg 1 f" pipeline_stall $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bz X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
b0 F"
bx E"
xD"
xC"
bx B"
bx A"
bx @"
x?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
xt
xs
xr
xq
xp
xo
xn
xm
xl
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
0b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
xQ
xP
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
0D
0C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
08
bx 7
06
05
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
0*
bx )
x(
bx '
bx &
x%
x$
bz #
1"
0!
$end
#1
0t
0s
0n
0l
0q
0p
0o
0r
0m
b0 k
b0 i
b0 h
b0 j
b0 v
b0 u
b0 3
b0 Q"
b0 S"
b0 4
b0 P"
b0 R"
b0 O
b0 4"
b0 +"
b0 *"
b0 9
b0 d
b0 g
b0 :
b0 c
b0 f
b0 e
b0 ?
b0 z
b0 Y"
b0 B
b0 w
b0 U"
b0 A
b0 x
b0 V"
b0 @
b0 y
b0 W"
b0 =
b0 |
b0 ["
b0 ;
b0 ~
b0 H"
b0 ]"
b0 <
b0 }
b0 G"
b0 \"
b0 >
b0 {
b0 Z"
0P
0Q
b0 /
b0 V
b0 a"
b0 2
b0 Y
b0 ^"
b0 1
b0 X
b0 _"
b0 0
b0 W
b0 `"
b0 -
b0 T
b0 c"
b0 +
b0 R
b0 e"
b0 ,
b0 S
b0 d"
b0 .
b0 U
b0 b"
12"
00"
0,"
01"
0/"
b0 L
b0 Z
b0 ""
0."
0-"
b0 J
b0 \
b0 $"
b0 K
b0 [
b0 #"
b0 E
b0 a
b0 )"
b0 F
b0 `
b0 ("
b0 I
b0 ]
b0 %"
b0 H
b0 ^
b0 &"
b0 T"
b0 G
b0 _
b0 '"
b0 :"
1!
#2
0!
#3
1!
#4
0!
0"
#5
1s
b10011 k
b1000 h
b1 j
b11111 u
b100 e
b111110100000000000000010010011 :
b111110100000000000000010010011 c
b111110100000000000000010010011 f
b0 M
b0 5"
b0 J"
b0 N
b0 6"
b0 I"
1!
#6
0!
#7
1t
0s
b110011 k
b1 i
b1 h
b10 j
b0 u
b1 =
b1 |
b1 ["
b1111101000 @
b1111101000 y
b1111101000 W"
b10011 ?
b10011 z
b10011 Y"
b0 K"
b1000 e
b100 9
b100 d
b100 g
b100001000000100110011 :
b100001000000100110011 c
b100001000000100110011 f
1!
#8
0!
#9
1C
0t
1l
b100011 k
b0 i
b0 j
b10 v
bx 4
bx P"
bx R"
bx 3
bx Q"
bx S"
b1111101000 O
1*
1f"
b1100 e
b1000 9
b1000 d
b1000 g
b100000010000000100011 :
b100000010000000100011 c
b100000010000000100011 f
b1 <
b1 }
b1 G"
b1 \"
b1 ;
b1 ~
b1 H"
b1 ]"
b0 @
b0 y
b0 W"
b10 =
b10 |
b10 ["
b110011 ?
b110011 z
b110011 Y"
b100 >
b100 {
b100 Z"
1P
b10011 /
b10011 V
b10011 a"
b1111101000 0
b1111101000 W
b1111101000 `"
b1 -
b1 T
b1 c"
1!
#10
0!
#11
b1111101000 +"
b1111101000 *"
b0 O
1f"
b1111101000 G
b1111101000 _
b1111101000 '"
b10011 J
b10011 \
b10011 $"
b1111101000 K
b1111101000 [
b1111101000 #"
b1 H
b1 ^
b1 &"
b1 T"
0P
b0 /
b0 V
b0 a"
b0 0
b0 W
b0 `"
b0 -
b0 T
b0 c"
1!
#12
0!
#13
0C
b0 +"
b0 *"
0*
0f"
b1111101000 3
b1111101000 Q"
b1111101000 S"
b1111101000 4
b1111101000 P"
b1111101000 R"
b0 J
b0 \
b0 $"
b0 K
b0 [
b0 #"
b0 H
b0 ^
b0 &"
b0 T"
b0 G
b0 _
b0 '"
b1 M
b1 5"
b1 J"
b1111101000 N
b1111101000 6"
b1111101000 I"
1!
#14
0!
#15
b0 4
b0 P"
b0 R"
1n
0l
b11 k
b0 h
b10 j
b0 v
b0 M
b0 5"
b0 J"
b0 N
b0 6"
b0 I"
1Q
b110011 /
b110011 V
b110011 a"
b10 -
b10 T
b10 c"
b1111101000 +
b1111101000 R
b1111101000 e"
b1111101000 ,
b1111101000 S
b1111101000 d"
b100 .
b100 U
b100 b"
b10 B
b10 w
b10 U"
b0 =
b0 |
b0 ["
b1 ;
b1 ~
b1 H"
b1 ]"
b0 <
b0 }
b0 G"
b0 \"
b100011 ?
b100011 z
b100011 Y"
b1000 >
b1000 {
b1000 Z"
b1111101000 L"
b10000 e
b1100 9
b1100 d
b1100 g
b100000011 :
b100000011 c
b100000011 f
1!
#16
0!
#17
xt
xs
xn
xl
xq
xp
xo
xr
xm
bx k
bx i
bx h
bx j
bx v
bx u
b0 3
b0 Q"
b0 S"
b10100 e
b10000 9
b10000 d
b10000 g
bx :
bx c
bx f
b10 =
b10 |
b10 ["
b0 B
b0 w
b0 U"
b0 ;
b0 ~
b0 H"
b0 ]"
b11 ?
b11 z
b11 Y"
b1100 >
b1100 {
b1100 Z"
0Q
b100011 /
b100011 V
b100011 a"
b10 2
b10 Y
b10 ^"
b0 -
b0 T
b0 c"
b0 ,
b0 S
b0 d"
b1000 .
b1000 U
b1000 b"
b11111010000 G
b11111010000 _
b11111010000 '"
b110011 J
b110011 \
b110011 $"
b1111101000 E
b1111101000 a
b1111101000 )"
b1111101000 +"
b1111101000 F
b1111101000 `
b1111101000 ("
b100 I
b100 ]
b100 %"
b10 H
b10 ^
b10 &"
b10 T"
1!
#18
0!
#19
1C
1*
1D
16
b10 M
b10 5"
b10 J"
b11111010000 N
b11111010000 6"
b11111010000 I"
02"
1,"
b10 L
b10 Z
b10 ""
1-"
b100011 J
b100011 \
b100011 $"
b0 +"
b0 F
b0 `
b0 ("
b1000 I
b1000 ]
b1000 %"
b0 H
b0 ^
b0 &"
b0 T"
b0 G
b0 _
b0 '"
b11 /
b11 V
b11 a"
b0 2
b0 Y
b0 ^"
b10 -
b10 T
b10 c"
b0 +
b0 R
b0 e"
b1100 .
b1100 U
b1100 b"
b0 =
b0 |
b0 ["
bx ?
bx z
bx Y"
b10000 >
b10000 {
b10000 Z"
b11000 e
b10100 9
b10100 d
b10100 g
1!
#20
0!
#21
b0 @"
b0 ;"
1D"
16
b11111010000 M"
b0 N
b0 6"
b0 I"
b0 M
b0 5"
b0 J"
b1111101000 A"
b1111101000 '
b1111101000 8"
b1111101000 <"
b1111 B"
b1111 &
b1111 9"
b1111 ="
b0 )
b0 7"
1$
1C"
1%
1?"
1(
b1 :"
1!
#22
0!
#23
15
0D"
b1 F"
0C"
0%
b10 :"
1!
#24
0!
#25
b10 F"
1!
#26
0!
#27
0C
0*
0D
05
06
18
b11 F"
1!
#28
0!
#29
1C
1*
1D
bx 4"
16
b11100 e
b11000 9
b11000 d
b11000 g
b10100 >
b10100 {
b10100 Z"
xP
xQ
bx /
bx V
bx a"
b0 -
b0 T
b0 c"
b10000 .
b10000 U
b10000 b"
12"
0,"
b0 L
b0 Z
b0 ""
1."
0-"
b11 J
b11 \
b11 $"
b0 E
b0 a
b0 )"
b1100 I
b1100 ]
b1100 %"
b10 H
b10 ^
b10 &"
b10 T"
0?"
0(
b0 :"
08
b0 F"
1!
#30
0!
#31
16
0$
1C"
1%
1?"
1(
b1 :"
1!
#32
0!
#33
15
0C"
0%
b10 :"
b1 F"
1!
#34
0!
#35
b10 F"
1!
#36
0!
#37
0C
0*
0D
05
06
18
b11 F"
1!
#38
0!
#39
b0 4"
08
b0 F"
bx N
bx 6"
bx I"
0?"
0(
b0 :"
x."
x-"
bx J
bx \
bx $"
b10000 I
b10000 ]
b10000 %"
b0 H
b0 ^
b0 &"
b0 T"
b10100 .
b10100 U
b10100 b"
b11000 >
b11000 {
b11000 Z"
b100000 e
b11100 9
b11100 d
b11100 g
1!
#40
0!
#41
b100100 e
b100000 9
b100000 d
b100000 g
bx K"
b11100 >
b11100 {
b11100 Z"
b11000 .
b11000 U
b11000 b"
b10100 I
b10100 ]
b10100 %"
b0 N
b0 6"
b0 I"
1!
#42
0!
#43
b11000 I
b11000 ]
b11000 %"
b11100 .
b11100 U
b11100 b"
b100000 >
b100000 {
b100000 Z"
b0 K"
b101000 e
b100100 9
b100100 d
b100100 g
1!
#44
0!
#45
b101100 e
b101000 9
b101000 d
b101000 g
b100100 >
b100100 {
b100100 Z"
b100000 .
b100000 U
b100000 b"
b11100 I
b11100 ]
b11100 %"
1!
#46
0!
#47
b100000 I
b100000 ]
b100000 %"
b100100 .
b100100 U
b100100 b"
b101000 >
b101000 {
b101000 Z"
b110000 e
b101100 9
b101100 d
b101100 g
1!
#48
0!
#49
b110100 e
b110000 9
b110000 d
b110000 g
b101100 >
b101100 {
b101100 Z"
b101000 .
b101000 U
b101000 b"
b100100 I
b100100 ]
b100100 %"
1!
#50
0!
#51
b101000 I
b101000 ]
b101000 %"
b101100 .
b101100 U
b101100 b"
b110000 >
b110000 {
b110000 Z"
b111000 e
b110100 9
b110100 d
b110100 g
1!
#52
0!
#53
b111100 e
b111000 9
b111000 d
b111000 g
b110100 >
b110100 {
b110100 Z"
b110000 .
b110000 U
b110000 b"
b101100 I
b101100 ]
b101100 %"
1!
#54
0!
